<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation
import Combine
import PlaygroundSupport

PlaygroundPage.current.needsIndefiniteExecution = true

var subscriptions = Set&lt;AnyCancellable&gt;()

example(of: "Publisher") { 
    let myNotification = Notification.Name("MyNotification")
    let publisher = NotificationCenter.default
        .publisher(for: myNotification, object: nil)    
    
    let center = NotificationCenter.default
    
    let observer = center.addObserver(
        forName: myNotification,
        object: nil,
        queue: nil) { notification in
        print("Notification received!")
    }
    
    center.post(name: myNotification, object: nil)
    
    center.removeObserver(observer)
}

example(of: "Subscriber") { 
    let myNotification = Notification.Name("MyNotification")
    let center = NotificationCenter.default
    
    let publisher = center.publisher(for: myNotification, object: nil)
    
    let subscription = publisher.sink { _ in
        print("Notification received from a publisher!")
    }
    
    center.post(name: myNotification, object: nil)
    
    subscription.cancel()
}

example(of: "Just") { 
    let just = Just("Hello World!")
    
    _ = just.sink(receiveCompletion: {  
        print("Received completion", $0)
    } ,receiveValue: { 
        print("Received value", $0)
    })
    
    _ = just
        .sink(
        receiveCompletion: {
            print("Received completion (another)", $0)
        },
        receiveValue: {
            print("Received value (another)", $0)
    })
    
    print(just.values)
}

example(of: "assign(to:on:)") { 
    class SomeObject {
        var value: String = "" {
            didSet {
                print(value)
            }
        }
    }
    
    let object = SomeObject()
    
    let publisher = ["Hello", "World"].publisher
    
    _ = publisher.assign(to: \.value, on: object)
}

example(of: "assign(to:)") { 
    class SomeObject {
        @Published var value = 0
    }    
    
    let object = SomeObject()
    
    object.$value
        .sink { 
            print($0)
        }
    
    (0..&lt;10).publisher.assign(to: &amp;object.$value)
}

example(of: "Custom Subscriber") { 
    let publisher = (1...6).publisher

    final class IntSubscriber: Subscriber {
        typealias Input = Int
        typealias Failure = Never
        
        func receive(subscription: Subscription) {
            subscription.request(.max(3))
        }
        
        func receive(_ input: Int) -&gt; Subscribers.Demand {
            print("Received value", input)
            return .none
        }
        
        func receive(completion: Subscribers.Completion&lt;Never&gt;) {
            print("Received completion", completion)
        }
    }  
    let subscriber = IntSubscriber() 
    publisher.subscribe(subscriber)
}


//example(of: "Future") { 
//    func futureIncrement(
//        integer: Int,
//        afterDelay delay: TimeInterval) -&gt; Future&lt;Int, Never&gt; {
//        Future&lt;Int, Never&gt; { promice in
//            DispatchQueue.global().asyncAfter(deadline: .now() + delay) { 
//                promice(.success(integer + 1))
//            }
//        }
//    }
//    
//    let future = futureIncrement(integer: 1, afterDelay: 3)
//    
//    future
//        .sink(receiveCompletion: {print($0)},
//              receiveValue: {print($0)})
//        .store(in: &amp;subscriptions)
//}

example(of: "Passthrough Subject") { 
    enum MyError: Error {
        case test
    }
    
    final class StringSubscriber: Subscriber {
        typealias Input = String
        typealias Failure = MyError
        
        func receive(subscription: Subscription) {
            subscription.request(.max(2))
        }
        func receive(_ input: String) -&gt; Subscribers.Demand {
            print("Received value", input)
            return input == "World" ? .max(1) : .none
        }
        
        func receive(completion: Subscribers.Completion&lt;MyError&gt;) {
            print("Received completion", completion)    
        }
    }
    
    let subscriber = StringSubscriber()
    
    let subject = PassthroughSubject&lt;String, MyError&gt;()
    
    subject.subscribe(subscriber)
    
    let subscription = subject
        .sink { completion in
            print("Received completion (sink)", completion)
        } receiveValue: { value in
            print("Recieved value (sink)", value)
        }
    subject.send("Hello")
    subject.send("World")
    
    subscription.cancel()
    
    subject.send("Still there?")
    
    subject.send(completion: .failure(MyError.test))
    subject.send(completion: .finished)
    subject.send("How about another one?")
}

example(of: "CurrentValueSubject") { 
    var oneSubscriptions = Set&lt;AnyCancellable&gt;()
    
    let subject = CurrentValueSubject&lt;Int, Never&gt;(0)
    
    subject
        .print()
        .sink(receiveValue: { print($0) })
        .store(in: &amp;oneSubscriptions)
    
    subject.send(1)
    subject.send(2)
    print(subject.value)
    subject.value = 3
    print(subject.value)
    
    subject
        .print()
        .sink(receiveValue: {print("Second subscription", $0)})
        .store(in: &amp;oneSubscriptions)
    
    subject.send(completion: .finished)
}

example(of: "Dynamically adjusting demand") { 
    final class IntSubscriber: Subscriber {
        typealias Input = Int
        typealias Failure = Never
        
        func receive(subscription: Subscription) {
            subscription.request(.max(2))
        }
        
        func receive(_ input: Int) -&gt; Subscribers.Demand {
            print("Received value", input)
            
            switch input {
            case 1:
                return .max(2)
            case 3:
                return .max(1)
            default:
                return .none
            }
        }
        
        func receive(completion: Subscribers.Completion&lt;Never&gt;) {
            print("Received completion", completion)
        }
    }    
    
    let subscriber = IntSubscriber()
    
    let subject = PassthroughSubject&lt;Int, Never&gt;()
    
    subject.subscribe(subscriber)
    
    subject.send(1)
    subject.send(2)
    subject.send(3)
    subject.send(4)
    subject.send(5)
    subject.send(6)
}

example(of: "Type erasure") { 
    let subject = PassthroughSubject&lt;Int, Never&gt;()

    let publisher = subject.eraseToAnyPublisher()

    publisher
        .sink(receiveValue: { print($0)} )
        .store(in: &amp;subscriptions)
    subject.send(0)    
}

example(of: "async/await") { 
    let subject = CurrentValueSubject&lt;Int, Never&gt;(0)

    Task {
        for await element in subject.values {
            print("Element: \(element)")
            print("Completed")
        }
    }
    
    subject.send(1)
    subject.send(2)
    subject.send(3)
    
    subject.send(completion: .finished)
}
</string>
			<key>ModifiedRange</key>
			<string>{1, 6794}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
